apiVersion: v1
kind: Template
metadata:
  name: ${APPLICATION_NAME}-persistent
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-postgresql
  spec:
    ports:

    - name: ${APPLICATION_NAME}-postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${APPLICATION_NAME}-postgresql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-postgresql
  spec:
    replicas: 1
    selector:
      name: ${APPLICATION_NAME}-postgresql
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          image: rhscl/postgresql-95-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}-postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${APPLICATION_NAME}-postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APPLICATION_NAME}-postgresql-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-postgresql
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-postgresql
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: docker.io/openshiftdemos/${APPLICATION_NAME}:${SONARQUBE_VERSION}
      name: ${SONARQUBE_VERSION}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${APPLICATION_NAME}-postgresql","namespace":"","kind":"Service"}]'
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 9000-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: SONARQUBE_JDBC_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: SONARQUBE_JDBC_URL
            value: jdbc:postgresql://${APPLICATION_NAME}-postgresql/${POSTGRESQL_DATABASE}
          - name: SONARQUBE_JDBC_USERNAME
            value: ${POSTGRESQL_USER}
          image: docker.io/openshiftdemos/${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:${SONARQUBE_VERSION}
      type: ImageChange
parameters:
- description: The exposed route/host name
  name: HOST_NAME
  required: false
- description: The name for the application
  name: APPLICATION_NAME
  required: true
  value: sonarqube
- description: SonarQube version
  displayName: SonarQube version
  name: SONARQUBE_VERSION
  required: true
  value: "6.0"
- description: The exposed route/host name
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 5Gi
- description: Postgresql Database
  displayName: Postgresql Database
  name: POSTGRESQL_DATABASE
  required: true
  value: sonar
- description: Postgresql Version
  displayName: Postgresql Version
  name: POSTGRESQL_VERSION
  required: true
  value: "9.5"
- description: Postgresql User
  displayName: Postgresql User
  name: POSTGRESQL_USER
  required: true
  value: sonar
- description: Postgresql Password
  displayName: Postgresql Password
  name: POSTGRESQL_PASSWORD
  from: '[a-zA-Z0-9]{8}'
  value: sonar
